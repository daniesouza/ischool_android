package br.com.marrs.ischool.webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/6/2014 12:42:21 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import java.text.SimpleDateFormat;
import java.util.Hashtable;
import java.util.Locale;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import br.com.marrs.ischool.entidades.Mensagem;
import br.com.marrs.ischool.entidades.Usuario;
import br.com.marrs.ischool.util.Crypto;

public class MensagemCrypt implements KvmSerializable {
    
    public VectorByte idAluno;
    public VectorByte idCliente;
    public VectorByte idWebMensagem;
    public VectorByte idDeviceMensagem;
    
    
    public VectorByte idUsuario;
    public VectorByte nomeUsuario;
    public VectorByte loginUsuario;
    
    public VectorByte mensagem;
    public VectorByte dataCadastro;
    public VectorByte tamanhoBytes;
    public VectorByte hashArquivo;
    
    
    
    public MensagemCrypt(){}
    
    public MensagemCrypt(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("idAluno"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idAluno");
            idAluno = new VectorByte(j);
        }
        if (soapObject.hasProperty("idCliente"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idCliente");
            idCliente = new VectorByte(j);
        }
        if (soapObject.hasProperty("idWebMensagem"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idWebMensagem");
            idWebMensagem = new VectorByte(j);
        }
        if (soapObject.hasProperty("idUsuario"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idUsuario");
            idUsuario = new VectorByte(j);
        }
        if (soapObject.hasProperty("mensagem"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("mensagem");
            mensagem = new VectorByte(j);
        }
        if (soapObject.hasProperty("tamanhoBytes"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("tamanhoBytes");
            tamanhoBytes = new VectorByte(j);
        }
        if (soapObject.hasProperty("hashArquivo"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("hashArquivo");
            hashArquivo = new VectorByte(j);
        }
        if (soapObject.hasProperty("dataCadastro"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("dataCadastro");
            dataCadastro = new VectorByte(j);
        }     
        if (soapObject.hasProperty("nomeUsuario"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("nomeUsuario");
            nomeUsuario = new VectorByte(j);
        }   
        if (soapObject.hasProperty("loginUsuario"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("loginUsuario");
            loginUsuario = new VectorByte(j);
        }           
        if (soapObject.hasProperty("idDeviceMensagem"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idDeviceMensagem");
            idDeviceMensagem = new VectorByte(j);
        }          
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return idAluno == null ? null : idAluno.toString();
            case 1:
                return idCliente == null ? null : idCliente.toString();
            case 2:
                return idWebMensagem == null ? null : idWebMensagem.toString();
            case 3:
                return idUsuario == null ? null : idUsuario.toString();
            case 4:
                return mensagem == null ? null : mensagem.toString();
            case 5:
                return tamanhoBytes == null ? null : tamanhoBytes.toString();
            case 6:
                return hashArquivo == null ? null : hashArquivo.toString();                   
            case 7:
                return dataCadastro == null ? null : dataCadastro.toString();   
            case 8:
                return nomeUsuario == null ? null : nomeUsuario.toString(); 
            case 9:
                return loginUsuario == null ? null : loginUsuario.toString(); 
            case 10:
                return idDeviceMensagem == null ? null : idDeviceMensagem.toString(); 
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 11;
    }
    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idAluno";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idCliente";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idWebMensagem";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idUsuario";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "mensagem";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "tamanhoBytes";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "hashArquivo";
                break;   
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dataCadastro";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nomeUsuario";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "loginUsuario";
                break;
            case 10:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idDeviceMensagem";
                break;                
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }


    public Mensagem decriptarMensagem() throws Exception{
    	
    	Mensagem mensagem = new Mensagem();
    	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS",Locale.US);
    	
    	mensagem.setIdWebMensagem(this.idWebMensagem == null ? null : Long.valueOf(new String(Crypto.decrypt(this.idWebMensagem.toBytes()))));
    	mensagem.setIdDeviceMensagem(this.idDeviceMensagem == null ? null : Long.valueOf(new String(Crypto.decrypt(this.idDeviceMensagem.toBytes()))));
    	
//    	mensagem.setAluno(this.idAluno == null ? null : new Aluno());
//    	mensagem.getAluno().setId(this.idAluno == null ? null : Long.valueOf(new String(Crypto.decrypt(this.idAluno.toBytes()))));
    	
    	//mensagem.setCliente(this.idCliente == null ? null : new Cliente());
    	//mensagem.getCliente().setId(this.idCliente == null ? null : Long.valueOf(new String(Crypto.decrypt(this.idCliente.toBytes()))));
    	
    	mensagem.setUsuario(new Usuario());
    	mensagem.getUsuario().setId(this.idUsuario == null ? null : Long.valueOf(new String(Crypto.decrypt(this.idUsuario.toBytes()))));
    	mensagem.getUsuario().setNome(this.nomeUsuario == null ? null : new String(Crypto.decrypt(this.nomeUsuario.toBytes())));
    	mensagem.getUsuario().setUsuario(this.loginUsuario == null ? null : new String(Crypto.decrypt(this.loginUsuario.toBytes())));
    	
    	mensagem.setMensagem(this.mensagem == null ? null : new String(Crypto.decrypt(this.mensagem.toBytes())));
    	
    	mensagem.setTamanhoBytes(this.tamanhoBytes == null ? null : Long.valueOf(new String(Crypto.decrypt(this.tamanhoBytes.toBytes()))));
    	
    	mensagem.setHashArquivo(this.hashArquivo == null ? null : new String(Crypto.decrypt(this.hashArquivo.toBytes())));
    	
    	mensagem.setDataCadastro(this.dataCadastro == null ? null : dateFormat.parse(new String(Crypto.decrypt(this.dataCadastro.toBytes()))));
    	

    	return mensagem;
    }
    
}
