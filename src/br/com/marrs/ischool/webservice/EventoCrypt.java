package br.com.marrs.ischool.webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/6/2014 12:42:21 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import java.text.SimpleDateFormat;
import java.util.Hashtable;
import java.util.Locale;

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import br.com.marrs.ischool.entidades.Evento;
import br.com.marrs.ischool.util.Crypto;


public class EventoCrypt implements KvmSerializable {
    
    public VectorByte ativo;
    public VectorByte codigoEvento;
    public VectorByte dataCadastro;
    public VectorByte icone;
    public VectorByte idEvento;
    public VectorByte nome;
    public VectorByte preCadastro;
    public VectorByte unidadeMedida;
    
    public EventoCrypt(){}
    
    public EventoCrypt(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("ativo"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("ativo");
            ativo = new VectorByte(j);
        }
        if (soapObject.hasProperty("codigoEvento"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("codigoEvento");
            codigoEvento = new VectorByte(j);
        }
        if (soapObject.hasProperty("dataCadastro"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("dataCadastro");
            dataCadastro = new VectorByte(j);
        }
        if (soapObject.hasProperty("icone"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("icone");
            icone = new VectorByte(j);
        }
        if (soapObject.hasProperty("idEvento"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idEvento");
            idEvento = new VectorByte(j);
        }
        if (soapObject.hasProperty("nome"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("nome");
            nome = new VectorByte(j);
        }
        if (soapObject.hasProperty("preCadastro"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("preCadastro");
            preCadastro = new VectorByte(j);
        }
        if (soapObject.hasProperty("unidadeMedida"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("unidadeMedida");
            unidadeMedida = new VectorByte(j);
        }
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return ativo == null ? null : ativo.toString();
            case 1:
                return codigoEvento == null ? null : codigoEvento.toString();
            case 2:
                return dataCadastro == null ? null : dataCadastro.toString();
            case 3:
                return icone == null ? null : icone.toString();
            case 4:
                return idEvento == null ? null : idEvento.toString();
            case 5:
                return nome == null ? null : nome.toString();
            case 6:
                return preCadastro == null ? null : preCadastro.toString();
            case 7:
                return unidadeMedida == null ? null : unidadeMedida.toString();
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 8;
    }
    

    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "ativo";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "codigoEvento";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dataCadastro";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "icone";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idEvento";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "nome";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "preCadastro";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "unidadeMedida";
                break;
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
    public Evento decriptarEvento() throws Exception{
    	
    	Evento evento = new Evento();
    	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS",Locale.US);
    	
    	evento.setId(this.idEvento == null ? null : Long.valueOf(new String(Crypto.decrypt(this.idEvento.toBytes()))));
    	evento.setAtivo(this.ativo == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.ativo.toBytes()))));
    	evento.setCodigoEvento(this.codigoEvento == null ? null : new String(Crypto.decrypt(this.codigoEvento.toBytes())));
    	evento.setDataCadastro(this.dataCadastro == null ? null : dateFormat.parse(new String(Crypto.decrypt(this.dataCadastro.toBytes()))));
    	evento.setIcone(this.icone == null ? null : new String(Crypto.decrypt(this.icone.toBytes())));
    	evento.setNome(this.nome == null ? null : new String(Crypto.decrypt(this.nome.toBytes())));
    	evento.setPreCadastro(this.preCadastro == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.preCadastro.toBytes()))));
    	//evento.setTipo(this.tipo == null ? null : Integer.valueOf(new String(Crypto.decrypt(this.tipo.toBytes()))));
    	evento.setUnidadeMedida(this.unidadeMedida == null ? null : new String(Crypto.decrypt(this.unidadeMedida.toBytes())));
    	
    	return evento;
    }
    
}
