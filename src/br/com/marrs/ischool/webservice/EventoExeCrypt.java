package br.com.marrs.ischool.webservice;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.5
//
// Date Of Creation: 7/6/2014 12:42:21 AM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;

import java.text.SimpleDateFormat;
import java.util.Hashtable;
import java.util.Locale;

import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import br.com.marrs.ischool.entidades.EventoExecutado;
import br.com.marrs.ischool.util.Crypto;


public class EventoExeCrypt implements KvmSerializable {
    
    public VectorByte avaliacaoEvento;
    public ClasseCrypt classeField;
    public VectorByte dataCadastro;
    public VectorByte dataFim;
    public VectorByte dataInicio;
    public VectorByte enviarFralda;
    public VectorByte enviarLeite;
    public VectorByte enviarLencos;
    public VectorByte enviarOutros;
    public VectorByte enviarPomada;
    public EventoCrypt evento;
    public VectorByte icone;
    public VectorByte idAluno;
    public VectorByte idCliente;
    public VectorByte idEventoExecutado;
    public VectorByte idUsuario;
    public VectorByte lidoDevice;
    public VectorByte medicamentos;
    public VectorByte observacoes;
    public VectorByte periodoEvento;
    public VectorByte quantidade;
    public VectorByte tipo;
    public VectorByte tomouBanho;
    public VectorByte statusEventoExecutado;
    public VectorByte dataAtualizacao;
    
    public EventoExeCrypt(){}
    
    public EventoExeCrypt(SoapObject soapObject)
    {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("avaliacaoEvento"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("avaliacaoEvento");
            avaliacaoEvento = new VectorByte(j);
        }
        if (soapObject.hasProperty("classe"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("classe");
            classeField =  new ClasseCrypt (j);
            
        }
        if (soapObject.hasProperty("dataCadastro"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("dataCadastro");
            dataCadastro = new VectorByte(j);
        }
        if (soapObject.hasProperty("dataFim"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("dataFim");
            dataFim = new VectorByte(j);
        }
        if (soapObject.hasProperty("dataInicio"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("dataInicio");
            dataInicio = new VectorByte(j);
        }
        if (soapObject.hasProperty("enviarFralda"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("enviarFralda");
            enviarFralda = new VectorByte(j);
        }
        if (soapObject.hasProperty("enviarLeite"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("enviarLeite");
            enviarLeite = new VectorByte(j);
        }
        if (soapObject.hasProperty("enviarLencos"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("enviarLencos");
            enviarLencos = new VectorByte(j);
        }
        if (soapObject.hasProperty("enviarOutros"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("enviarOutros");
            enviarOutros = new VectorByte(j);
        }
        if (soapObject.hasProperty("enviarPomada"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("enviarPomada");
            enviarPomada = new VectorByte(j);
        }
        if (soapObject.hasProperty("evento"))
        {
            SoapObject j = (SoapObject)soapObject.getProperty("evento");
            evento =  new EventoCrypt (j);
            
        }
        if (soapObject.hasProperty("icone"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("icone");
            icone = new VectorByte(j);
        }
        if (soapObject.hasProperty("idAluno"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idAluno");
            idAluno = new VectorByte(j);
        }
        if (soapObject.hasProperty("idCliente"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idCliente");
            idCliente = new VectorByte(j);
        }
        if (soapObject.hasProperty("idEventoExecutado"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idEventoExecutado");
            idEventoExecutado = new VectorByte(j);
        }
        if (soapObject.hasProperty("idUsuario"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("idUsuario");
            idUsuario = new VectorByte(j);
        }
        if (soapObject.hasProperty("lidoDevice"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("lidoDevice");
            lidoDevice = new VectorByte(j);
        }
        if (soapObject.hasProperty("medicamentos"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("medicamentos");
            medicamentos = new VectorByte(j);
        }
        if (soapObject.hasProperty("observacoes"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("observacoes");
            observacoes = new VectorByte(j);
        }
        if (soapObject.hasProperty("periodoEvento"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("periodoEvento");
            periodoEvento = new VectorByte(j);
        }
        if (soapObject.hasProperty("quantidade"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("quantidade");
            quantidade = new VectorByte(j);
        }
        if (soapObject.hasProperty("tipo"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("tipo");
            tipo = new VectorByte(j);
        }
        if (soapObject.hasProperty("tomouBanho"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("tomouBanho");
            tomouBanho = new VectorByte(j);
        }
        if (soapObject.hasProperty("statusEventoExecutado"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("statusEventoExecutado");
            statusEventoExecutado = new VectorByte(j);
        }      
        
        if (soapObject.hasProperty("dataAtualizacao"))
        {
            SoapPrimitive j = (SoapPrimitive)soapObject.getProperty("dataAtualizacao");
            dataAtualizacao = new VectorByte(j);
        }  
    }
    @Override
    public Object getProperty(int arg0) {
        switch(arg0){
            case 0:
                return avaliacaoEvento == null ? null : avaliacaoEvento.toString();
            case 1:
                return classeField;
            case 2:
                return dataCadastro == null ? null : dataCadastro.toString();
            case 3:
                return dataFim == null ? null : dataFim.toString();
            case 4:
                return dataInicio == null ? null : dataInicio.toString();
            case 5:
                return enviarFralda == null ? null : enviarFralda.toString();
            case 6:
                return enviarLeite == null ? null : enviarLeite.toString();
            case 7:
                return enviarLencos == null ? null : enviarLencos.toString();
            case 8:
                return enviarOutros == null ? null : enviarOutros.toString();
            case 9:
                return enviarPomada == null ? null : enviarPomada.toString();
            case 10:
                return evento;
            case 11:
                return icone == null ? null : icone.toString();
            case 12:
                return idAluno == null ? null : idAluno.toString();
            case 13:
                return idCliente == null ? null : idCliente.toString();
            case 14:
                return idEventoExecutado == null ? null :  idEventoExecutado.toString();
            case 15:
                return idUsuario == null ? null :  idUsuario.toString();
            case 16:
                return lidoDevice == null ? null :  lidoDevice.toString();
            case 17:
                return medicamentos == null ? null :  medicamentos.toString();
            case 18:
                return observacoes == null ? null :  observacoes.toString();
            case 19:
                return periodoEvento == null ? null :  periodoEvento.toString();
            case 20:
                return quantidade == null ? null :  quantidade.toString();
            case 21:
                return tipo == null ? null :  tipo.toString();
            case 22:
                return tomouBanho == null ? null :  tomouBanho.toString();
            case 23:
                return statusEventoExecutado == null ? null :  statusEventoExecutado.toString();
            case 24:
                return dataAtualizacao == null ? null :  dataAtualizacao.toString();                  
        }
        return null;
    }
    
    @Override
    public int getPropertyCount() {
        return 25;
    }
    

    
    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch(index){
            case 0:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "avaliacaoEvento";
                break;
            case 1:
                info.type = ClasseCrypt.class;
                info.name = "classe";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dataCadastro";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dataFim";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dataInicio";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "enviarFralda";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "enviarLeite";
                break;
            case 7:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "enviarLencos";
                break;
            case 8:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "enviarOutros";
                break;
            case 9:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "enviarPomada";
                break;
            case 10:
                info.type = EventoCrypt.class;
                info.name = "evento";
                break;
            case 11:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "icone";
                break;
            case 12:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idAluno";
                break;
            case 13:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idCliente";
                break;
            case 14:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idEventoExecutado";
                break;
            case 15:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "idUsuario";
                break;
            case 16:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "lidoDevice";
                break;
            case 17:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "medicamentos";
                break;
            case 18:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "observacoes";
                break;
            case 19:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "periodoEvento";
                break;
            case 20:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "quantidade";
                break;
            case 21:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "tipo";
                break;
            case 22:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "tomouBanho";
                break;
            case 23:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "statusEventoExecutado";
                break;  
            case 24:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "dataAtualizacao";
                break;                  
        }
    }
    
    @Override
    public void setProperty(int arg0, Object arg1) {
    }
    
    
    public EventoExecutado decriptarEventoExecutado() throws Exception{
    	
    	EventoExecutado eventoExecutado = new EventoExecutado();
    	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS",Locale.US);
    	
    	eventoExecutado.setId(this.idEventoExecutado == null ? null : Long.valueOf(new String(Crypto.decrypt(this.idEventoExecutado.toBytes()))));
    	eventoExecutado.setAvaliacaoEvento(this.avaliacaoEvento == null ? null : Integer.valueOf(new String(Crypto.decrypt(this.avaliacaoEvento.toBytes()))));
    	eventoExecutado.setDataCadastro(this.dataCadastro == null ? null : dateFormat.parse(new String(Crypto.decrypt(this.dataCadastro.toBytes()))));
    	eventoExecutado.setDataFim(this.dataFim == null ? null : dateFormat.parse(new String(Crypto.decrypt(this.dataFim.toBytes()))));
    	eventoExecutado.setDataInicio(this.dataInicio == null ? null : dateFormat.parse(new String(Crypto.decrypt(this.dataInicio.toBytes()))));
    	eventoExecutado.setEnviarFralda(this.enviarFralda == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.enviarFralda.toBytes()))));
    	eventoExecutado.setEnviarLeite(this.enviarLeite == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.enviarLeite.toBytes()))));
    	eventoExecutado.setEnviarLencos(this.enviarLencos == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.enviarLencos.toBytes()))));
    	eventoExecutado.setEnviarOutros(this.enviarOutros == null ? null : new String(Crypto.decrypt(this.enviarOutros.toBytes())));
    	eventoExecutado.setEnviarPomada(this.enviarPomada == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.enviarPomada.toBytes()))));
    	eventoExecutado.setIcone(this.icone == null ? null : new String(Crypto.decrypt(this.icone.toBytes())));
    	eventoExecutado.setLidoDevice(this.lidoDevice == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.lidoDevice.toBytes()))));
    	eventoExecutado.setMedicamentos(this.medicamentos == null ? null : new String(Crypto.decrypt(this.medicamentos.toBytes())));
    	eventoExecutado.setObservacoes(this.observacoes == null ? null : new String(Crypto.decrypt(this.observacoes.toBytes())));
    	eventoExecutado.setPeriodoEvento(this.periodoEvento == null ? null : Integer.valueOf(new String(Crypto.decrypt(this.periodoEvento.toBytes()))));
    	eventoExecutado.setQuantidade(this.quantidade == null ? null : Long.valueOf(new String(Crypto.decrypt(this.quantidade.toBytes()))));
    	eventoExecutado.setTipo(this.tipo == null ? null : Integer.valueOf(new String(Crypto.decrypt(this.tipo.toBytes()))));
    	eventoExecutado.setTomouBanho(this.tomouBanho == null ? null : Boolean.valueOf(new String(Crypto.decrypt(this.tomouBanho.toBytes()))));
    	eventoExecutado.setStatusEventoExecutado(this.statusEventoExecutado == null ? null : Integer.valueOf(new String(Crypto.decrypt(this.statusEventoExecutado.toBytes()))));
    	eventoExecutado.setDataAtualizacao(this.dataAtualizacao == null ? null : Long.valueOf(new String(Crypto.decrypt(this.dataAtualizacao.toBytes()))));
    	

    	return eventoExecutado;
    }
    
}
